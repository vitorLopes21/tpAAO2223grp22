/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package tpaao.Main;

import java.util.ArrayList;
import java.util.Scanner;

import javafx.application.Application;
import tpaao.DataStructure.City;
import tpaao.DataStructure.Network;
import tpaao.DataStructure.TSPSolver;
import tpaao.GUI.NetworkGUI;

public class App {
    private static Network network;
    private static int complexity;

    public static Network getNetwork() {
        return network;
    }

    public static int getComplexity() {
        return complexity;
    }

    public static void incrementComplexity() {
        complexity++;
    }

    public static void main(String[] args) {
        try {
            int choice;
            ArrayList<City> cityArray = new ArrayList<City>();
            cityArray.add(new City("Lisbon", 38.7223, -9.1393)); // Portugal
            cityArray.add(new City("Madrid", 40.4168, -3.7038)); // Spain
            cityArray.add(new City("Paris", 48.8566, 2.3522)); // France
            cityArray.add(new City("Rome", 41.9028, 12.4964)); // Italy
            cityArray.add(new City("Berlin", 52.5200, 13.4050)); // Germany
            cityArray.add(new City("London", 51.5074, -0.1278)); // United Kingdom
            cityArray.add(new City("Athens", 37.9838, 23.7275)); // Greece
            cityArray.add(new City("Amsterdam", 52.3667, 4.8945)); // Netherlands
            cityArray.add(new City("Brussels", 50.8503, 4.3517)); // Belgium
            cityArray.add(new City("Vienna", 48.2082, 16.3738)); // Austria
            cityArray.add(new City("Moscow", 55.7512, 37.6184)); // Russia
            cityArray.add(new City("Tokyo", 35.6895, 139.6917)); // Japan
            cityArray.add(new City("Beijing", 39.9042, 116.4074)); // China
            cityArray.add(new City("New Delhi", 28.6139, 77.2090)); // India
            cityArray.add(new City("Cairo", 30.0444, 31.2357)); // Egypt
            cityArray.add(new City("Nairobi", -1.2864, 36.8172)); // Kenya
            cityArray.add(new City("Cape Town", -33.9249, 18.4241)); // South Africa
            cityArray.add(new City("Rio de Janeiro", -22.9068, -43.1729)); // Brazil
            cityArray.add(new City("Mexico City", 19.4326, -99.1332)); // Mexico
            cityArray.add(new City("Toronto", 43.6510, -79.3470)); // Canada
            cityArray.add(new City("Washington, D.C.", 38.9072, -77.0369)); // United States
            cityArray.add(new City("Buenos Aires", -34.6037, -58.3816)); // Argentina
            cityArray.add(new City("Sydney", -33.8651, 151.2099)); // Australia
            cityArray.add(new City("Cape Town", -33.9249, 18.4241)); // South Africa

            Network network = new Network();

            System.out.println(
                    "Which method do you want to choose? [1]-> 6 city method; [2]-> 12 city method; [3|WIP]-> 24 city method; [0] -> Go back");

            Scanner scanner = new Scanner(System.in);

            do {

                choice = scanner.nextInt();
                
                if (choice < 0 || choice > 3) {
                    System.out.println("Invalid choice. Please try again.");
                }
            } while (choice < 0 || choice > 3);

            switch (choice) {
                case 1:
                    System.out.println("6 city Dynamic Programming method");
                    for (int i = 0; i < 6; i++) {
                        network.addVertex(cityArray.get(i));
                    }
                    break;
                case 2:
                    System.out.println("12 city Dynamic Programming method");
                    for (int i = 0; i < 12; i++) {
                        network.addVertex(cityArray.get(i));
                    }
                    break;
                case 3:

                    System.out.println("24 city Dynamic Programming method");
                    for (int i = 0; i < 24; i++) {
                        network.addVertex(cityArray.get(i));
                    }

                    break;
                case 0:
                    break;
            }

            if (choice != 0) {
                scanner.close();

                network.addEdgesBetweenAllCities();

                // network.printDistanceMatrix();

                App.network = network;

                App.complexity = 0;

                TSPSolver tspSolver = new TSPSolver(network);

                int ans = Integer.MAX_VALUE;
                for (int i = 1; i <= network.getNumVertexes(); i++) {
                    int tourCost = tspSolver.solveTSPProblemUsingDynamicProgramming(i, (1 << (network.getNumVertexes() + 1)) - 1);
                    int distanceToStartCity = network.getDistanceMatrix()[i][0]; // Use index 0 for the start city
                    ans += Math.min(ans, tourCost + distanceToStartCity);
                }

                System.out.println("The cost of the most efficient tour = " + ans);
                System.out.println("Complexity analysis = " + complexity);

                Application.launch(NetworkGUI.class, args);
            }

        } catch (IllegalArgumentException e) {
            System.out.println(e.getMessage());
        }
    }
}
